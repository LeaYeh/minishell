name: Build and Test

on:
  pull_request:

################################################################################

jobs:

  compilation_test:
    name: Compilation Test
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:

      #### Setup #########################################################

      - name: Checkout source branch of pull request
        uses: actions/checkout@v4

      - name: Set up build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang-12 valgrind

      #### Compilation test ##############################################

      - name: 🔨 Compile with Makefile
        run: make

  ############################################################################

  # Save all test scripts (mandatory part) in a matrix
  prepare_test_matrix:
    name: Prepare Test Matrix
    runs-on: ubuntu-latest
    outputs:
      test_matrix: ${{ steps.prep_matrix.outputs.TEST_MATRIX }}
    steps:

      - name: Clone tester repository
        run: git clone https://github.com/LeaYeh/42_minishell_tester.git

      - name: Prepare matrix
        id: prep_matrix
        run: |
          FILES=$(find 42_minishell_tester/cmds/mand -type f -name "*.sh" \
          -exec basename {} \; | jq -R -s -c 'split("\n")[:-1]')
          echo "TEST_MATRIX=${FILES}" >> "$GITHUB_OUTPUT"

  ############################################################################

  memory_leak_test:
    name: Memory Leak Test
    needs: prepare_test_matrix
    strategy:
      matrix:
        test_script: ${{ fromJson(needs.prepare_test_matrix.outputs.test_matrix) }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:

      #### Setup #########################################################

      - name: Checkout source branch of pull request
        uses: actions/checkout@v4

      - name: Set up build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang-12 valgrind

      - name: Set up testing framework
        run: |
          git clone https://github.com/LeaYeh/42_minishell_tester.git
          cp -r 42_minishell_tester $HOME
          chmod +x $HOME/42_minishell_tester/tester.sh

      - name: Delete all but one test script
        run: |
          for file in $HOME/42_minishell_tester/cmds/**/*.sh; do
            if [[ "$(basename "$file")" != "${{ matrix.test_script }}" ]]; then
              rm "$file"
            fi
          done

      #### Memory leak test ##############################################

      - name: 🔍 Check memory leaks
        run: |
          make fclean test
          $HOME/42_minishell_tester/tester.sh vm
        env:
          GH_BRANCH: "IGNORE"

  ############################################################################

  combine_memory_leak_test_results:
    name: Combine Memory Leak Test Results
    needs: [memory_leak_test]
    runs-on: ubuntu-latest
    steps:
      - name: Combine memory leak test results
        run: echo "All memory leak tests finished"

  ############################################################################

  regression_test:
    name: Regression Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:

      #### Setup #########################################################

      - name: Checkout source branch of pull request
        uses: actions/checkout@v4

      - name: Set up build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang-12 valgrind

      - name: Set up testing framework
        run: |
          git clone https://github.com/LeaYeh/42_minishell_tester.git
          cp -r 42_minishell_tester $HOME
          chmod +x $HOME/42_minishell_tester/tester.sh
          find .github/scripts -type f -name "*.sh" -exec chmod +x {} \;
          cp .github/scripts/*.sh $HOME

      #### Test source branch ############################################

      - name: 🌱 Test source branch of pull request
        run: |
          make fclean test
          $HOME/42_minishell_tester/tester.sh m > $HOME/source_test_result.txt
        env:
          GH_BRANCH: "SOURCE_FAILED_COUNT"

      - name: 📝 Print all test cases that failed on source branch
        run: |
          export RESULT_FILE="$HOME/source_test_result.txt"
          $HOME/print_all_failed_test_cases.sh

      #### Test target branch ############################################

      - name: Checkout target branch of pull request
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}

      - name: 🎯 Test target branch of pull request
        run: |
          make fclean test
          $HOME/42_minishell_tester/tester.sh m > $HOME/target_test_result.txt
        env:
          GH_BRANCH: "TARGET_FAILED_COUNT"

      #### Comparison of results #########################################

      - name: 🆚 Compare failed count
        id: comparison
        run: |
          echo "TARGET_FAILED_COUNT: $TARGET_FAILED_COUNT"
          echo "SOURCE_FAILED_COUNT: $SOURCE_FAILED_COUNT"
          if [ $SOURCE_FAILED_COUNT -gt $TARGET_FAILED_COUNT ]; then
            echo "SOURCE_FAILED_COUNT is greater than TARGET_FAILED_COUNT"
            exit 1
          else
            echo "SOURCE_FAILED_COUNT is less than or equal to TARGET_FAILED_COUNT"
            exit 0
          fi
        env:
          SOURCE_FAILED_COUNT: ${{ env.SOURCE_FAILED_COUNT }}
          TARGET_FAILED_COUNT: ${{ env.TARGET_FAILED_COUNT }}
        continue-on-error: true

        # Can fail the job
      - name: 📈 Show the regressions between SOURCE and TARGET branch
        if: steps.comparison.outcome == 'failure'
        run: $HOME/print_changed_test_cases.sh

        # Cannot fail the job
      - name: 📉 Show the improvements between SOURCE and TARGET branch
        if: steps.comparison.outcome == 'success'
        run: $HOME/print_changed_test_cases.sh || true
