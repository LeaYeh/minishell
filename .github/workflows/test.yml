# .github/workflows/test.yml
name: Test Workflow

on:
  pull_request:

jobs:
  compilation_test:
    name: Compilation Test
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - name: Checkout source branch of pull request
        uses: actions/checkout@v4
      - name: Set up test environment
        uses: ./.github/actions/setup
      - name: üî® Compile with Makefile
        run: make

  prepare_test_matrix:
    name: Prepare Test Matrix
    needs: compilation_test
    runs-on: ubuntu-latest
    outputs:
      test_matrix: ${{ steps.prep_matrix.outputs.TEST_MATRIX }}
    steps:
      - name: Clone tester repository
        run: git clone https://github.com/LeaYeh/42_minishell_tester.git
      - name: Prepare matrix
        id: prep_matrix
        run: |
          FILES=$(find 42_minishell_tester/cmds/**/*.sh \
          -exec basename {} \; | jq -R -s -c 'split("\n")[:-1]')
          echo "TEST_MATRIX=${FILES}" >> "$GITHUB_OUTPUT"

  memory_leak_test:
    name: Memory Leak Test
    needs: prepare_test_matrix
    strategy:
      matrix:
        test_script: ${{ fromJson(needs.prepare_test_matrix.outputs.test_matrix) }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout source branch of pull request
        uses: actions/checkout@v4
      - name: Set up test environment
        uses: ./.github/actions/setup
      - name: Delete all but one test script
        run: |
          for file in $HOME/42_minishell_tester/cmds/**/*.sh; do
            if [[ "$(basename "$file")" != "${{ matrix.test_script }}" ]]; then
              rm "$file"
            fi
          done
      - name: üîç Check memory leaks
        run: |
          make fclean test
          $HOME/42_minishell_tester/tester.sh va
        env:
          GH_BRANCH: "IGNORE"

  combine_memory_leak_test_results:
    name: Combine Memory Leak Test Results
    needs: [memory_leak_test]
    runs-on: ubuntu-latest
    steps:
      - name: Combine memory leak test results
        run: echo "All memory leak tests finished"

  mand_regression_test:
    name: Mandatory Part Regression Test
    runs-on: ubuntu-latest
    needs: compilation_test
    timeout-minutes: 10
    steps:
      - name: Checkout source branch of pull request
        uses: actions/checkout@v4
      - name: Run regression test
        uses: ./.github/actions/regression_test
        with:
          test_type: m

  bonus_regression_test:
    name: Bonus Part Regression Test
    runs-on: ubuntu-latest
    needs: compilation_test
    timeout-minutes: 10
    steps:
      - name: Checkout source branch of pull request
        uses: actions/checkout@v4
      - name: Run regression test
        uses: ./.github/actions/regression_test
        with:
          test_type: b
