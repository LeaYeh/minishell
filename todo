# assignment:

Problems:
- If just one builtin not in a pipeline, how to set a variable only for its environment?

-! How to differentiate if a temp variable was newly created or just a value was replaced?
-> Instead of using a ENV_CMD enum, do the assignment while creating the assignment_array for the final_command_table.
  -> This entails that the builtins will have to use the the env_array as well.
	-> But how should they update the shell environment then?

I want an `update_env()` function that handles var creation or replacement automatically.

Command Scenarios:
1. Just assignment, no cmd.
	-> In shell. Must stay.
	-> Final: shell->env_list
		-> not exist: ENV_LOCAL
		-> yes exist: No change.
2. Assignment before solely one builtin.
	-> In shell. Must disappear.
	-> Final: shell->env_list
		-> ENV_CMD
3. Assignment before builtin in pipeline.
	-> In child.
	-> Final: shell->env_list
		-> ENV_CMD (doesn_'t matter)
4. Assignment before external cmd.
	-> In child.
	-> Final: env array
		-> ENV_EXPORT + ENV_CMD (always tmp_value)

Env Scenarios:
1. Does not already exist.
	-> ENV_CMD (delete after cmd)
2. Already exists, but no value.
	-> tmp_value
3. Already exists, with value.
	-> tmp_value

Scope Scenarios:
1. Local.
2. Exported.

Whenever an env_node gets modified, put it to the front.
This would make sense to me bc the change will likely be accessed soon. (except in cd)

However, I would lose the order of the initial env (sorted by hash table).



# export:

- [X] If args_len < 2, print all exported env vars in ASCII order, with "export " prepended.
	- [X] The value gets put in double-quotes.
	- [ ] Quotes, dollar signs, backslash and '`' are escaped with a backslash.

- [X] If one of the variable assignments is not a valid variable name, return value will be GENERAL_ERROR (1), but export will still go through all arguments.
The error message gets printed for every invalid identifier.

- [X] If the argument string does not have an '=' and the key does not already exist, the value will be set to NULL.
- [X] If the key already exists, the env_node will be set to be exported.

### Error messages:
- bash: export: `<invalid name>': not a valid identifier

### Test cases:
- [X] export "" -> export: `': not a valid identifier
- [X] export without any variable in env left -> just a newline.


env -i /usr/bin/valgrind ./minishell
